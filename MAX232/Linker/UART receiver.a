;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.04.4a Advanced
;Automatic Program Generator
;© Copyright 1998-2009 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 4/13/2012
;Author  : NeVaDa
;Company :
;Comments:
;
;
;Chip type               : ATtiny2313
;AVR Core Clock frequency: 16.000000 MHz
;Memory model            : Tiny
;External RAM size       : 0
;Data Stack size         : 32
;*****************************************************/
;
;#include <tiny2313.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x50
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_standby=0x40
;PCODE: $00000006 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000007 VOL: 0
	#endif
;PCODE: $00000008 VOL: 0
;PCODE: $00000009 VOL: 0
;#include <stdio.h>
;#include <delay.h>
;
;char *data;
;char i,n;
;char max = 16;
;
;void wait(void)
; 0000 0020 {

	.CSEG
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
; 0000 0021   while ((UCSRA & (1 << UDRE)) == 0)
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 0022   {
; 0000 0023     //empty, do nothing
; 0000 0024   }
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0025 }
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;
;void rxtx(void)
; 0000 0028 {
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0029   for (i=0;i<max;i++)
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 002A   {
; 0000 002B     data[n] = UDR;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 002C     wait();
;PCODE: $00000021 VOL: 0
; 0000 002D   }
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 002E 
; 0000 002F   for (i=0;i<max;i++)
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0030   {
; 0000 0031     UDR = data [n];
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0032     wait();
;PCODE: $00000031 VOL: 0
; 0000 0033   }
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0034 }
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;
;void main(void)
; 0000 0037 {
;PCODE: $00000038 VOL: 0
; 0000 0038 // Declare your local variables here
; 0000 0039 
; 0000 003A // Crystal Oscillator division factor: 1
; 0000 003B #pragma optsize-
; 0000 003C CLKPR=0x80;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 003D CLKPR=0x00;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 003E #ifdef _OPTIMIZE_SIZE_
; 0000 003F #pragma optsize+
; 0000 0040 #endif
; 0000 0041 
; 0000 0042 // Input/Output Ports initialization
; 0000 0043 // Port A initialization
; 0000 0044 // Func2=In Func1=In Func0=In
; 0000 0045 // State2=T State1=T State0=T
; 0000 0046 PORTA=0x00;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0047 DDRA=0x00;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0048 
; 0000 0049 // Port B initialization
; 0000 004A // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 004B // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 004C PORTB=0x00;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 004D DDRB=0x00;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 004E 
; 0000 004F // Port D initialization
; 0000 0050 // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0051 // State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0052 PORTD=0x00;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0053 DDRD=0x00;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0054 
; 0000 0055 // Timer/Counter 0 initialization
; 0000 0056 // Clock source: System Clock
; 0000 0057 // Clock value: Timer 0 Stopped
; 0000 0058 // Mode: Normal top=FFh
; 0000 0059 // OC0A output: Disconnected
; 0000 005A // OC0B output: Disconnected
; 0000 005B TCCR0A=0x00;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 005C TCCR0B=0x00;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 005D TCNT0=0x00;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 005E OCR0A=0x00;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 005F OCR0B=0x00;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0060 
; 0000 0061 // Timer/Counter 1 initialization
; 0000 0062 // Clock source: System Clock
; 0000 0063 // Clock value: Timer1 Stopped
; 0000 0064 // Mode: Normal top=FFFFh
; 0000 0065 // OC1A output: Discon.
; 0000 0066 // OC1B output: Discon.
; 0000 0067 // Noise Canceler: Off
; 0000 0068 // Input Capture on Falling Edge
; 0000 0069 // Timer1 Overflow Interrupt: Off
; 0000 006A // Input Capture Interrupt: Off
; 0000 006B // Compare A Match Interrupt: Off
; 0000 006C // Compare B Match Interrupt: Off
; 0000 006D TCCR1A=0x00;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 006E TCCR1B=0x00;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 006F TCNT1H=0x00;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0070 TCNT1L=0x00;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0071 ICR1H=0x00;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0072 ICR1L=0x00;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0073 OCR1AH=0x00;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0074 OCR1AL=0x00;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0075 OCR1BH=0x00;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0076 OCR1BL=0x00;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0077 
; 0000 0078 // External Interrupt(s) initialization
; 0000 0079 // INT0: Off
; 0000 007A // INT1: Off
; 0000 007B // Interrupt on any change on pins PCINT0-7: Off
; 0000 007C GIMSK=0x00;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 007D MCUCR=0x00;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 007E 
; 0000 007F // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0080 TIMSK=0x00;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0081 
; 0000 0082 // Universal Serial Interface initialization
; 0000 0083 // Mode: Disabled
; 0000 0084 // Clock source: Register & Counter=no clk.
; 0000 0085 // USI Counter Overflow Interrupt: Off
; 0000 0086 USICR=0x00;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0087 
; 0000 0088 // USART initialization
; 0000 0089 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 008A // USART Receiver: On
; 0000 008B // USART Transmitter: On
; 0000 008C // USART Mode: Asynchronous
; 0000 008D // USART Baud Rate: 250
; 0000 008E UCSRA=0x00;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 008F UCSRB=0x18;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0090 UCSRC=0x06;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0091 UBRRH=0x0F;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0092 UBRRL=0x9F;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0093 
; 0000 0094 // Analog Comparator initialization
; 0000 0095 // Analog Comparator: Off
; 0000 0096 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 0097 ACSR=0x80;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0098 
; 0000 0099 while (1)
;PCODE: $0000007B VOL: 0
; 0000 009A       {
; 0000 009B         rxtx();
;PCODE: $0000007C VOL: 0
; 0000 009C       };
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 009D }
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
