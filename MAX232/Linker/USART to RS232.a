;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.04.4a Advanced
;Automatic Program Generator
;© Copyright 1998-2009 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 2/25/2012
;Author  : NeVaDa
;Company :
;Comments:
;
;
;Chip type               : ATtiny2313
;AVR Core Clock frequency: 4.000000 MHz
;Memory model            : Tiny
;External RAM size       : 0
;Data Stack size         : 32
;*****************************************************/
;
;#include <tiny2313.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x50
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_standby=0x40
;PCODE: $00000006 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000007 VOL: 0
	#endif
;PCODE: $00000008 VOL: 0
;PCODE: $00000009 VOL: 0
;#include <stdio.h>
;#include <delay.h>
;#include <string.h>
;
;char *data = "Bangsat";

	.DSEG
_0x3:
	.BYTE 0x8
;char escape = 0x0A;
;char n = 0,i = 0;
;
;void wait(void)
; 0000 0021 {

	.CSEG
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
; 0000 0022   while ((UCSRA & (1 << UDRE)) == 0)
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 0023   {
; 0000 0024     //empty, do nothing
; 0000 0025   }
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0026 }
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;
;void send(char *str)
; 0000 0029 {
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 002A   n = strlen(str);
;	*str -> Y+0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 002B   for (i=0;i<n;i++)
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 002C   {
; 0000 002D     wait();
;PCODE: $00000021 VOL: 0
; 0000 002E     UDR = data[i];
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 002F   }
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0030   wait();
;PCODE: $0000002A VOL: 0
; 0000 0031   UDR = escape;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0032 }
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;
;void main(void)
; 0000 0035 {
;PCODE: $00000030 VOL: 0
; 0000 0036 // Declare your local variables here
; 0000 0037 
; 0000 0038 // Crystal Oscillator division factor: 1
; 0000 0039 #pragma optsize-
; 0000 003A CLKPR=0x80;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 003B CLKPR=0x00;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 003C #ifdef _OPTIMIZE_SIZE_
; 0000 003D #pragma optsize+
; 0000 003E #endif
; 0000 003F 
; 0000 0040 // Input/Output Ports initialization
; 0000 0041 // Port A initialization
; 0000 0042 // Func2=In Func1=In Func0=In
; 0000 0043 // State2=T State1=T State0=T
; 0000 0044 PORTA=0x00;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0045 DDRA=0x00;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0046 
; 0000 0047 // Port B initialization
; 0000 0048 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0049 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 004A PORTB=0x00;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 004B DDRB=0x00;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 004C 
; 0000 004D // Port D initialization
; 0000 004E // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 004F // State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0050 PORTD=0b00000100;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0051 DDRD=0x03;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0052 
; 0000 0053 // Timer/Counter 0 initialization
; 0000 0054 // Clock source: System Clock
; 0000 0055 // Clock value: Timer 0 Stopped
; 0000 0056 // Mode: Normal top=FFh
; 0000 0057 // OC0A output: Disconnected
; 0000 0058 // OC0B output: Disconnected
; 0000 0059 TCCR0A=0x00;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 005A TCCR0B=0x00;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 005B TCNT0=0x00;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 005C OCR0A=0x00;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 005D OCR0B=0x00;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 005E 
; 0000 005F // Timer/Counter 1 initialization
; 0000 0060 // Clock source: System Clock
; 0000 0061 // Clock value: Timer1 Stopped
; 0000 0062 // Mode: Normal top=FFFFh
; 0000 0063 // OC1A output: Discon.
; 0000 0064 // OC1B output: Discon.
; 0000 0065 // Noise Canceler: Off
; 0000 0066 // Input Capture on Falling Edge
; 0000 0067 // Timer1 Overflow Interrupt: Off
; 0000 0068 // Input Capture Interrupt: Off
; 0000 0069 // Compare A Match Interrupt: Off
; 0000 006A // Compare B Match Interrupt: Off
; 0000 006B TCCR1A=0x00;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 006C TCCR1B=0x00;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 006D TCNT1H=0x00;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 006E TCNT1L=0x00;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 006F ICR1H=0x00;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0070 ICR1L=0x00;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0071 OCR1AH=0x00;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0072 OCR1AL=0x00;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0073 OCR1BH=0x00;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0074 OCR1BL=0x00;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0075 
; 0000 0076 // External Interrupt(s) initialization
; 0000 0077 // INT0: Off
; 0000 0078 // INT1: Off
; 0000 0079 // Interrupt on any change on pins PCINT0-7: Off
; 0000 007A GIMSK=0x00;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 007B MCUCR=0x00;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 007C 
; 0000 007D // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 007E TIMSK=0x00;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 007F 
; 0000 0080 // Universal Serial Interface initialization
; 0000 0081 // Mode: Disabled
; 0000 0082 // Clock source: Register & Counter=no clk.
; 0000 0083 // USI Counter Overflow Interrupt: Off
; 0000 0084 USICR=0x00;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0085 
; 0000 0086 // USART initialization
; 0000 0087 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0088 // USART Receiver: Off
; 0000 0089 // USART Transmitter: On
; 0000 008A // USART Mode: Asynchronous
; 0000 008B // USART Baud Rate: 250
; 0000 008C UCSRA=0x00;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 008D UCSRB=0x08;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 008E UCSRC=0x06;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 008F UBRRH=0x07;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0090 UBRRL=0xCF;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0091 
; 0000 0092 // Analog Comparator initialization
; 0000 0093 // Analog Comparator: Off
; 0000 0094 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 0095 ACSR=0x80;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0096 
; 0000 0097 while (1)
;PCODE: $00000073 VOL: 0
; 0000 0098       {
; 0000 0099           send(data);
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 009A       }
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 009B }
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
