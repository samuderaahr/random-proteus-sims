;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 5/30/2015
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega328P
;Program type            : Application
;AVR Core Clock frequency: 16.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega328p.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <twi.h>
;#include <stdio.h>
;
;#define SET(x,y) (x|=(1<<y))
;#define CLR(x,y) (x&=(~(1<<y)))
;#define CHK(x,y) (x&(1<<y))
;#define TOG(x,y) (x^=(1<<y))
;
;#define TWACK (TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA))   //I2C ACK for next transmission
;#define TWNACK (TWCR=(1<<TWINT)|(1<<TWEN))            //I2C NACK for next transmission
;#define TWRESET (TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWEA)) //I2C reset, duh!
;#define TWSTART (TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTA))					 //Send a start signal on the I2C bus
;
;#define I2C_SLAVE_ADDRESS 0x01
;#define SLA_W ((I2C_SLAVE_ADDRESS<<1) | 0)
;#define SLA_R ((I2C_SLAVE_ADDRESS<<1) | 1)
;
;#define RXBUF 3
;#define TXBUF 12
;
;unsigned char r_index = 0;
;char recv[RXBUF]; //buffer to store received bytes
;
;unsigned char t_index=0;
;char tran[TXBUF]= {1,2,3,4,5,6,7,8,9,10,11,12};

	.DSEG
;
;char kirim[2] = {0x20, 0x00};
;char terima[10];
;char txtemp[3] = "";
;char rxtemp[3] = "";
;
;flash char ovf[9] = "OVERFLOW";
;flash char dbg[6] = "HERE!";
;
;unsigned long millis = 0;
;static bool overflow = false;
;
;static void smartdelay(unsigned long ms);
;static void ov7670seq(void);
;static void i2c_delay(char cycles);
;static void kirim2_ov(char byte1, char byte2);
;char fetch_ov(char reg_add);
;
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0047 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0048   TCNT0=0x06;  // Reinitialize Timer 0 value
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0049 
; 0000 004A   if (millis != 0xFFFF)
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 004B   {
; 0000 004C   	millis++;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 004D   }
; 0000 004E 
; 0000 004F   else
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0050   {
; 0000 0051   	millis = 0;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0052     overflow = true;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0053     putsf(ovf);
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0054     #asm("cli");
;PCODE: $00000020 VOL: 0
	cli
;PCODE: $00000021 VOL: 0
; 0000 0055   }
;PCODE: $00000022 VOL: 0
; 0000 0056 }
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;
;void main(void)
; 0000 0059 {
;PCODE: $00000026 VOL: 0
; 0000 005A   // Declare your local variables here
; 0000 005B 
; 0000 005C   // Crystal Oscillator division factor: 1
; 0000 005D   #pragma optsize-
; 0000 005E   CLKPR=(1<<CLKPCE);
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 005F   CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0060   #ifdef _OPTIMIZE_SIZE_
; 0000 0061   #pragma optsize+
; 0000 0062   #endif
; 0000 0063 
; 0000 0064   // Input/Output Ports initialization
; 0000 0065   // Port B initialization
; 0000 0066   // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=Out Bit2=In Bit1=In Bit0=In
; 0000 0067   DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (1<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0068   // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=0 Bit2=T Bit1=T Bit0=T
; 0000 0069   PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 006A 
; 0000 006B   // Port C initialization
; 0000 006C   // Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 006D   DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 006E   // State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 006F   PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0070 
; 0000 0071   // Port D initialization
; 0000 0072   // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0073   DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0074   // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0075   PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0076 
; 0000 0077   // Timer/Counter 0 initialization
; 0000 0078   // Clock source: System Clock
; 0000 0079   // Clock value: 250.000 kHz
; 0000 007A   // Mode: Normal top=0xFF
; 0000 007B   // OC0A output: Disconnected
; 0000 007C   // OC0B output: Disconnected
; 0000 007D   // Timer Period: 1 ms
; 0000 007E   TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 007F   TCCR0B=(0<<WGM02) | (0<<CS02) | (1<<CS01) | (1<<CS00);
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0080   TCNT0=0x06;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0081   OCR0A=0x00;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0082   OCR0B=0x00;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0083 
; 0000 0084   // Timer/Counter 1 initialization
; 0000 0085   // Clock source: System Clock
; 0000 0086   // Clock value: Timer1 Stopped
; 0000 0087   // Mode: Normal top=0xFFFF
; 0000 0088   // OC1A output: Disconnected
; 0000 0089   // OC1B output: Disconnected
; 0000 008A   // Noise Canceler: Off
; 0000 008B   // Input Capture on Falling Edge
; 0000 008C   // Timer1 Overflow Interrupt: Off
; 0000 008D   // Input Capture Interrupt: Off
; 0000 008E   // Compare A Match Interrupt: Off
; 0000 008F   // Compare B Match Interrupt: Off
; 0000 0090   TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0091   TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0092   TCNT1H=0x00;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0093   TCNT1L=0x00;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0094   ICR1H=0x00;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0095   ICR1L=0x00;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0096   OCR1AH=0x00;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0097   OCR1AL=0x00;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0098   OCR1BH=0x00;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0099   OCR1BL=0x00;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 009A 
; 0000 009B   // Timer/Counter 2 initialization
; 0000 009C   // Clock source: System Clock
; 0000 009D   // Clock value: 16000.000 kHz
; 0000 009E   // Mode: CTC top=OCR2A
; 0000 009F   // OC2A output: Toggle on compare match
; 0000 00A0   // OC2B output: Disconnected
; 0000 00A1   // Timer Period: 0.5 us
; 0000 00A2   // Output Pulse(s):
; 0000 00A3   // OC2A Period: 1 us Width: 0.5 us
; 0000 00A4   ASSR=(0<<EXCLK) | (0<<AS2);
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 00A5   TCCR2A=(0<<COM2A1) | (1<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (1<<WGM21) | (0<<WGM20);
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 00A6   TCCR2B=(0<<WGM22) | (0<<CS22) | (0<<CS21) | (1<<CS20);
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 00A7   TCNT2=0x00;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 00A8   OCR2B=0x00;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 00A9   OCR2A=0x0F;		//500kHz
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 00AA   //OCR2A=0x07;		//1MHz
; 0000 00AB   //OCR2A=0x00; 	//8 MHz
; 0000 00AC 
; 0000 00AD   // Timer/Counter 0 Interrupt(s) initialization
; 0000 00AE   TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (1<<TOIE0);
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 00AF 
; 0000 00B0   // Timer/Counter 1 Interrupt(s) initialization
; 0000 00B1   TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 00B2 
; 0000 00B3   // Timer/Counter 2 Interrupt(s) initialization
; 0000 00B4   TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2);
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 00B5 
; 0000 00B6   // External Interrupt(s) initialization
; 0000 00B7   // INT0: Off
; 0000 00B8   // INT1: Off
; 0000 00B9   // Interrupt on any change on pins PCINT0-7: Off
; 0000 00BA   // Interrupt on any change on pins PCINT8-14: Off
; 0000 00BB   // Interrupt on any change on pins PCINT16-23: Off
; 0000 00BC   EICRA=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 00BD   EIMSK=(0<<INT1) | (0<<INT0);
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 00BE   PCICR=(0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 00BF 
; 0000 00C0   // USART initialization
; 0000 00C1   // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 00C2   // USART Receiver: Off
; 0000 00C3   // USART Transmitter: On
; 0000 00C4   // USART0 Mode: Asynchronous
; 0000 00C5   // USART Baud Rate: 38400
; 0000 00C6   UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 00C7   UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (0<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 00C8   UCSR0C=(0<<UMSEL01) | (0<<UMSEL00) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 00C9   UBRR0H=0x00;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 00CA   UBRR0L=0x19;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 00CB 
; 0000 00CC   // Analog Comparator initialization
; 0000 00CD   // Analog Comparator: Off
; 0000 00CE   // The Analog Comparator's positive input is
; 0000 00CF   // connected to the AIN0 pin
; 0000 00D0   // The Analog Comparator's negative input is
; 0000 00D1   // connected to the AIN1 pin
; 0000 00D2   ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 00D3   ADCSRB=(0<<ACME);
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 00D4   // Digital input buffer on AIN0: On
; 0000 00D5   // Digital input buffer on AIN1: On
; 0000 00D6   DIDR1=(0<<AIN0D) | (0<<AIN1D);
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 00D7 
; 0000 00D8   // ADC initialization
; 0000 00D9   // ADC disabled
; 0000 00DA   ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 00DB 
; 0000 00DC   // SPI initialization
; 0000 00DD   // SPI disabled
; 0000 00DE   SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 00DF 
; 0000 00E0   // TWI initialization
; 0000 00E1   // Mode: TWI Master
; 0000 00E2   // Bit Rate: 50 kHz
; 0000 00E3   twi_master_init(50);
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 00E4 
; 0000 00E5   // Global enable interrupts
; 0000 00E6   #asm("sei")
;PCODE: $00000084 VOL: 0
	sei
;PCODE: $00000085 VOL: 0
; 0000 00E7 
; 0000 00E8 	while (1)
;PCODE: $00000086 VOL: 0
; 0000 00E9   {
; 0000 00EA   	PORTC = 0x00;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 00EB     UDR0 = fetch_ov(0x0A);
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 00EC 
; 0000 00ED     smartdelay(100);
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 00EE   }
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 00EF }
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;
;static void smartdelay(unsigned long ms)
; 0000 00F2 {
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 00F3   unsigned long start = millis;
; 0000 00F4   do
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;	ms -> Y+4
;	start -> Y+0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 00F5   {
; 0000 00F6      //putsf(dbg);	//debug echo
; 0000 00F7   }  while (millis - start < ms || overflow);
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 00F8 
; 0000 00F9   if (overflow)
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 00FA   {
; 0000 00FB   	overflow = false;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 00FC   }
; 0000 00FD }
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;
;/*
;#define SET(x,y) (x|=(1<<y))
;#define CLR(x,y) (x&=(~(1<<y)))
;#define CHK(x,y) (x&(1<<y))
;#define TOG(x,y) (x^=(1<<y))
;
;#define TWACK (TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA))   //I2C ACK for next transmission
;#define TWNACK (TWCR=(1<<TWINT)|(1<<TWEN))            //I2C NACK for next transmission
;#define TWRESET (TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWEA)) //I2C reset, duh!
;#define TWSTART (TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTA))					 //Send a start signal on the I2C bus
;
;#define I2C_SLAVE_ADDRESS 0x01
;#define SLA_W ((I2C_SLAVE_ADDRESS<<1) | 0)
;#define SLA_R ((I2C_SLAVE_ADDRESS<<1) | 1)
;
;#define RXBUF 3
;#define TXBUF 12
;*/
;
;static void ov7670seq(void)
; 0000 0113 {
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 0114 	TWRESET;
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 0115 	TWSTART;
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 0116 
; 0000 0117 	TWACK;
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 0118 }
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;
;static void i2c_delay(char cycles)
; 0000 011B {
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 011C 	char count;
; 0000 011D   for (count = 0; count < cycles; count++)
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;	cycles -> Y+1
;	count -> R17
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 011E   {	}	//empty loop
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 011F }
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;
;void kirim2_ov(char byte1, char byte2)
; 0000 0122 {
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 0123   //txtemp = "";
; 0000 0124   //rxtemp = "";
; 0000 0125 
; 0000 0126   txtemp[0] = 0x21;
;PCODE: $000000D5 VOL: 0
;	byte1 -> Y+1
;	byte2 -> Y+0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 0127 }
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;
;char fetch_ov(char reg_add)
; 0000 012A {
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 012B 	char temp = 0;
; 0000 012C   char alamat = reg_add;
; 0000 012D   twi_master_trans(0x21, (char *) alamat, 1, (char *)temp, 1);
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;	reg_add -> Y+2
;	temp -> R17
;	alamat -> R16
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 012E   i2c_delay(100);
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 012F   return temp;
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 0130 }
;PCODE: $000000F9 VOL: 0
;
;
;
;//	//send start condition
;//	twiStart();
;//	twiAddr(camAddr_WR,TW_MT_SLA_ACK);
;//	twiWriteByte(reg,TW_MT_DATA_ACK);
;//	twiWriteByte(dat,TW_MT_DATA_ACK);
;//	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);//send stop
;//	_delay_ms(1);
