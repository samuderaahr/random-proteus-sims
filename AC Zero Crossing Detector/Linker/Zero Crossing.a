;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 7/29/2012
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATtiny2313
;AVR Core Clock frequency: 16.000000 MHz
;Memory model            : Tiny
;External RAM size       : 0
;Data Stack size         : 32
;*****************************************************/
;
;#include <tiny2313.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x50
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_standby=0x40
;PCODE: $00000006 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000007 VOL: 0
	#endif
;PCODE: $00000008 VOL: 0
;PCODE: $00000009 VOL: 0
;#include <delay.h>
;
;char trig = 0;
;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 001E {

	.CSEG
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
; 0000 001F   if (trig == 1)
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0020   {
; 0000 0021     PORTB.0 = !PORTB.0;  //toggle output
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0022     trig = 0;
;PCODE: $00000019 VOL: 0
; 0000 0023     #asm("cli")
;PCODE: $0000001A VOL: 0
	cli
;PCODE: $0000001B VOL: 0
; 0000 0024   }
; 0000 0025 }
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;
;void main(void)
; 0000 0028 {
;PCODE: $00000020 VOL: 0
; 0000 0029 // Declare your local variables here
; 0000 002A 
; 0000 002B // Crystal Oscillator division factor: 1
; 0000 002C #pragma optsize-
; 0000 002D CLKPR=0x80;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 002E CLKPR=0x00;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 002F #ifdef _OPTIMIZE_SIZE_
; 0000 0030 #pragma optsize+
; 0000 0031 #endif
; 0000 0032 
; 0000 0033 // Input/Output Ports initialization
; 0000 0034 // Port A initialization
; 0000 0035 // Func2=In Func1=In Func0=In
; 0000 0036 // State2=T State1=T State0=T
; 0000 0037 PORTA=0x00;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0038 DDRA=0x00;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0039 
; 0000 003A // Port B initialization
; 0000 003B // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=Out
; 0000 003C // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=0
; 0000 003D PORTB=0x00;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 003E DDRB=0x01;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 003F 
; 0000 0040 // Port D initialization
; 0000 0041 // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0042 // State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0043 PORTD=0x00;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0044 DDRD=0x00;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0045 
; 0000 0046 // Timer/Counter 0 initialization
; 0000 0047 // Clock source: System Clock
; 0000 0048 // Clock value: Timer 0 Stopped
; 0000 0049 // Mode: Normal top=0xFF
; 0000 004A // OC0A output: Disconnected
; 0000 004B // OC0B output: Disconnected
; 0000 004C TCCR0A=0x00;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 004D TCCR0B=0x00;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 004E TCNT0=0x00;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 004F OCR0A=0x00;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0050 OCR0B=0x00;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0051 
; 0000 0052 // Timer/Counter 1 initialization
; 0000 0053 // Clock source: System Clock
; 0000 0054 // Clock value: Timer1 Stopped
; 0000 0055 // Mode: Normal top=0xFFFF
; 0000 0056 // OC1A output: Discon.
; 0000 0057 // OC1B output: Discon.
; 0000 0058 // Noise Canceler: Off
; 0000 0059 // Input Capture on Falling Edge
; 0000 005A // Timer1 Overflow Interrupt: Off
; 0000 005B // Input Capture Interrupt: Off
; 0000 005C // Compare A Match Interrupt: Off
; 0000 005D // Compare B Match Interrupt: Off
; 0000 005E TCCR1A=0x00;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 005F TCCR1B=0x00;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0060 TCNT1H=0x00;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0061 TCNT1L=0x00;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0062 ICR1H=0x00;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0063 ICR1L=0x00;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0064 OCR1AH=0x00;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0065 OCR1AL=0x00;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0066 OCR1BH=0x00;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0067 OCR1BL=0x00;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0068 
; 0000 0069 // External Interrupt(s) initialization
; 0000 006A // INT0: On
; 0000 006B // INT0 Mode: Falling Edge
; 0000 006C // INT1: Off
; 0000 006D // Interrupt on any change on pins PCINT0-7: Off
; 0000 006E GIMSK=0x40;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 006F MCUCR=0x02;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0070 EIFR=0x40;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0071 
; 0000 0072 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0073 TIMSK=0x00;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0074 
; 0000 0075 // Universal Serial Interface initialization
; 0000 0076 // Mode: Disabled
; 0000 0077 // Clock source: Register & Counter=no clk.
; 0000 0078 // USI Counter Overflow Interrupt: Off
; 0000 0079 USICR=0x00;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 007A 
; 0000 007B // USART initialization
; 0000 007C // USART disabled
; 0000 007D UCSRB=0x00;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 007E 
; 0000 007F // Analog Comparator initialization
; 0000 0080 // Analog Comparator: Off
; 0000 0081 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 0082 ACSR=0x80;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0083 DIDR=0x00;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0084 
; 0000 0085 #asm("cli")
;PCODE: $0000005F VOL: 0
	cli
;PCODE: $00000060 VOL: 0
; 0000 0086 
; 0000 0087 while (1)
;PCODE: $00000061 VOL: 0
; 0000 0088       {
; 0000 0089         if (PINB.2 == 0)
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 008A         {
; 0000 008B           delay_ms(50);        //software debouncing
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 008C           if (PINB.2 == 0)
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 008D           {
; 0000 008E             delay_ms(50);
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 008F             if (PINB.2 == 0)
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0090             {
; 0000 0091               trig = 1;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0092               #asm("sei")      //global interrupt enable dalam if. default off karena delay akan
;PCODE: $00000073 VOL: 0
	sei
;PCODE: $00000074 VOL: 0
; 0000 0093                                //jadi 4-5x lebih lama jika interrupt enabled (see CVAVR help)
; 0000 0094             }
; 0000 0095           }
;PCODE: $00000075 VOL: 0
; 0000 0096         }
;PCODE: $00000076 VOL: 0
; 0000 0097       }
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0098 }
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
