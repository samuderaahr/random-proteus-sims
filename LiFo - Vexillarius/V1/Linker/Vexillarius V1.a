;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.04.4a Advanced
;Automatic Program Generator
;© Copyright 1998-2009 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 3/22/2012
;Author  : NeVaDa
;Company :
;Comments:
;
;
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 16.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;
;*****************************************************/
;
;/********************** Includes ********************/
;
;#include <stdlib.h>
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <string.h>
;#include <lcd.h>
;
;/********************** ASM Init ********************/
;
;#asm
;PCODE: $0000000D VOL: 0
   .equ __lcd_port=0x15 ;PORTC
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 0025 #endasm
;
;/******************** Definitions *******************/
;
;// dibawah ini semuanya macro, sat
;
;#define SERVO OCR1B
;#define SPEED OCR2
;#define AXIA PIND.0
;#define DIR1 PORTD.5
;#define DIR2 PORTD.6
;#define BTN1 PINB.0
;#define BTN2 PINB.1
;#define BTN3 PINB.2
;#define EXECUTE PINB.3
;
;/********************* Variables ********************/
;
;long enc = 0;
;char *strenc;
;char menu = 1;
;char flash *name = "Vexillarius V1.0";
;unsigned int cnt;
;
;/********************* Interrupt ********************/
;
;interrupt [EXT_INT0] void ext_int0_isr(void)  //implementasi Encoder, belum dipakai
; 0000 0040 {

	.CSEG
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0041   if (AXIA == 1)
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0042   {
; 0000 0043     enc++;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0044   }
; 0000 0045 
; 0000 0046   if (AXIA == 0)
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0047   {
; 0000 0048     enc--;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0049   }
; 0000 004A }
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;
;/********************* Functions ********************/
;
;void write(char flash *string1, char flash *string2)  //untuk nulis ke LCD, kalo line 1 dan 2 dari flash (kode)
; 0000 004F {
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0050   lcd_clear();
;	*string1 -> Y+2
;	*string2 -> Y+0
;PCODE: $00000029 VOL: 0
; 0000 0051   lcd_gotoxy(0,0);
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0052   lcd_putsf(string1);
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0053   lcd_gotoxy(0,1);
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0054   lcd_putsf(string2);
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0055 }
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;
;void write2(char *string1, char flash *string2)       //sama tapi line 1 dari variabel program
; 0000 0058 {
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0059   lcd_clear();
;	*string1 -> Y+2
;	*string2 -> Y+0
;PCODE: $0000003F VOL: 0
; 0000 005A   lcd_gotoxy(0,0);
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 005B   lcd_puts(string1);
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 005C   lcd_gotoxy(0,1);
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 005D   lcd_putsf(string2);
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 005E }
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;
;void clear(int delay) //buat clear LCD setelah n milisekon
; 0000 0061 {
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0062   delay_ms(delay);
;	delay -> Y+0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0063   lcd_clear();
;PCODE: $00000058 VOL: 0
; 0000 0064 }
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;
;void degtopwm(unsigned int deg)  //untuk konversi derajat ke PWM servo
; 0000 0067 {
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0068   SERVO = ((((deg*100)/180)*10)+1000); //1000 => 0deg (kiri max); 2000 => 180deg (kanan max); 1500 => 90deg (center);
;	deg -> Y+0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0069 }
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;
;void spdtopwm(unsigned char spd) //untuk kecepatan motor, n % , 0 <= n <= 100. jangan lebih karena bakal error (OF)
; 0000 006C {
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 006D   float spit;
; 0000 006E   spit = ((spd/10.0 * 255)); //kalo nemu algoritma yg lebih bagus, ganti aja
;PCODE: $0000006D VOL: 0
;	spd -> Y+4
;	spit -> Y+0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 006F   SPEED = (char) spit;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0070 }
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;
;void direction(unsigned char dir) //arah motor. 1 = maju, 2 = mundur, 3 = brake
; 0000 0073 {
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0074   if (dir == 1)
;	dir -> Y+0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0075   {
; 0000 0076     DIR1 = 1;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0077     DIR2 = 0;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0078   }
; 0000 0079 
; 0000 007A   if (dir == 0)
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 007B   {
; 0000 007C     DIR1 = 0;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 007D     DIR2 = 1;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 007E   }
; 0000 007F 
; 0000 0080   if (dir == 2)
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0081   {
; 0000 0082     DIR1 = 1;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 0083     DIR2 = 1;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 0084   }
; 0000 0085 
; 0000 0086   //DIR1 = 0;
; 0000 0087   //DIR2 = 0;
; 0000 0088 }
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;
;void step(unsigned int s, unsigned char m, unsigned char d,unsigned int t,char flash *l)
; 0000 008B //buat bikin gerakan terprogram, masih prototipe
; 0000 008C {
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 008D   for (cnt=0;cnt<t;cnt++)
;	s -> Y+6
;	m -> Y+5
;	d -> Y+4
;	t -> Y+2
;	*l -> Y+0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 008E   {
; 0000 008F     degtopwm(s);
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 0090     spdtopwm(m);
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 0091     direction(d);
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 0092     //ltoa(enc,strenc);
; 0000 0093     write2(strenc,l);
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 0094     delay_ms(1);
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 0095   }
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 0096 }
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;
;void checkbutton(void) //fungsi pushbutton, ga dipake karena kita cuma punya 2 tombol instead of 4
; 0000 0099 {
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 009A   if (BTN1 == 0)
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 009B   {
; 0000 009C     menu = 1;
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 009D   }
; 0000 009E 
; 0000 009F   if (BTN2 == 0)
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 00A0   {
; 0000 00A1     menu = 2;
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 00A2   }
; 0000 00A3 
; 0000 00A4   if (BTN3 == 0)
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 00A5   {
; 0000 00A6     menu = 3;
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 00A7   }
; 0000 00A8   delay_ms(10);
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 00A9 }
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;
;void showmenu(void) //fungsi menu
; 0000 00AC {
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 00AD   if (menu == 1)
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 00AE   {
; 0000 00AF     write("Main Menu :","1. Follow Line");
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 00B0   }
; 0000 00B1 
; 0000 00B2   if (menu == 2)
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 00B3   {
; 0000 00B4     write("Main Menu :","2. Follow Path");
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 00B5   }
; 0000 00B6 
; 0000 00B7   if (menu == 3)
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 00B8   {
; 0000 00B9     write("Main Menu :","3. Check Swing");
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 00BA   }
; 0000 00BB 
; 0000 00BC   delay_ms(10);
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 00BD }
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;
;void splash(void) //splash screen awal
; 0000 00C0 {
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 00C1   write(name,"Conquer 'em All!");
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 00C2   clear(500);
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 00C3 }
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;
;/******************** Main Block ********************/
;
;void main(void)
; 0000 00C8 {
;PCODE: $0000010A VOL: 0
; 0000 00C9 // Declare your local variables here
; 0000 00CA 
; 0000 00CB // Input/Output Ports initialization
; 0000 00CC // Port A initialization
; 0000 00CD // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00CE // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00CF PORTA=0x00;
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 00D0 DDRA=0x00;
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 00D1 
; 0000 00D2 // Port B initialization
; 0000 00D3 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00D4 // State7=T State6=T State5=T State4=T State3=P State2=P State1=P State0=P
; 0000 00D5 PORTB=0x0F;
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 00D6 DDRB=0x00;
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 00D7 
; 0000 00D8 // Port C initialization
; 0000 00D9 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00DA // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00DB PORTC=0x00;
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 00DC DDRC=0x00;
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 00DD 
; 0000 00DE // Port D initialization
; 0000 00DF // Func7=Out Func6=In Func5=In Func4=Out Func3=In Func2=In Func1=In Func0=In
; 0000 00E0 // State7=0 State6=T State5=T State4=0 State3=T State2=T State1=T State0=T
; 0000 00E1 PORTD=0x00;
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 00E2 DDRD=0xFF;
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 00E3 
; 0000 00E4 // Timer/Counter 0 initialization
; 0000 00E5 // Clock source: System Clock
; 0000 00E6 // Clock value: Timer 0 Stopped
; 0000 00E7 // Mode: Normal top=FFh
; 0000 00E8 // OC0 output: Disconnected
; 0000 00E9 TCCR0=0x00;
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 00EA TCNT0=0x00;
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 00EB OCR0=0x00;
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 00EC 
; 0000 00ED // Timer/Counter 1 initialization
; 0000 00EE // Clock source: System Clock
; 0000 00EF // Clock value: 2000.000 kHz
; 0000 00F0 // Mode: Ph. correct PWM top=ICR1
; 0000 00F1 // OC1A output: Discon.
; 0000 00F2 // OC1B output: Non-Inv.
; 0000 00F3 // Noise Canceler: Off
; 0000 00F4 // Input Capture on Falling Edge
; 0000 00F5 // Timer1 Overflow Interrupt: Off
; 0000 00F6 // Input Capture Interrupt: Off
; 0000 00F7 // Compare A Match Interrupt: Off
; 0000 00F8 // Compare B Match Interrupt: Off
; 0000 00F9 TCCR1A=0x22;
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 00FA TCCR1B=0x12;
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 00FB TCNT1H=0x00;
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 00FC TCNT1L=0x00;
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 00FD ICR1H=027;
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 00FE ICR1L=0x10;
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 00FF OCR1AH=0x00;
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 0100 OCR1AL=0x00;
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 0101 OCR1BH=0x00;
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 0102 OCR1BL=0x00;
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 0103 
; 0000 0104 // Timer/Counter 2 initialization
; 0000 0105 // Clock source: System Clock
; 0000 0106 // Clock value: 15.625 kHz
; 0000 0107 // Mode: Phase correct PWM top=FFh
; 0000 0108 // OC2 output: Non-Inverted PWM
; 0000 0109 ASSR=0x00;
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 010A TCCR2=0x67;
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 010B TCNT2=0x00;
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 010C OCR2=0x00;
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 010D 
; 0000 010E // External Interrupt(s) initialization
; 0000 010F // INT0: On
; 0000 0110 // INT0 Mode: Falling Edge
; 0000 0111 // INT1: Off
; 0000 0112 // INT2: Off
; 0000 0113 GICR|=0x40;
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 0114 MCUCR=0x02;
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 0115 MCUCSR=0x00;
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 0116 GIFR=0x40;
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 0117 
; 0000 0118 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0119 TIMSK=0x00;
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 011A 
; 0000 011B // Analog Comparator initialization
; 0000 011C // Analog Comparator: Off
; 0000 011D // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 011E ACSR=0x80;
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 011F SFIOR=0x00;
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 0120 
; 0000 0121 // LCD module initialization
; 0000 0122 lcd_init(16);
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 0123 
; 0000 0124 // Global enable interrupts
; 0000 0125 #asm("cli")
;PCODE: $0000014F VOL: 0
	cli
;PCODE: $00000150 VOL: 0
; 0000 0126 
; 0000 0127 splash();
;PCODE: $00000151 VOL: 0
; 0000 0128 
; 0000 0129 while (1)
;PCODE: $00000152 VOL: 0
; 0000 012A       {
; 0000 012B         checkbutton();
;PCODE: $00000153 VOL: 0
; 0000 012C         showmenu();
;PCODE: $00000154 VOL: 0
; 0000 012D         while (EXECUTE == 0 && menu == 2)
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 012E         {
; 0000 012F         step(90,0,2,200,"Align Me!");
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 0130         step(45,50,1,200,"Step One");
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 0131         step(180,50,1,200,"Step Two");
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0000 0132         step(0,50,1,200,"Step Three");
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0000 0133         step(135,50,1,200,"Step Four");
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0000 0134         step(90,100,2,1000,"Finish!");
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 0135         }
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
; 0000 0136       }
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0000 0137 }
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;
;//P.S coba2 dulu aja sat masing2 fungsi gimana kerjanya, kalo ga paham tanyain aja
;//    servo mungkin masih kacau itungannya/simulasiny, ntar coba gw benerin
;//    buat line following belom ada kodenya hehehe
