;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 12/26/2012
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATtiny2313
;AVR Core Clock frequency: 16.000000 MHz
;Memory model            : Tiny
;External RAM size       : 0
;Data Stack size         : 32
;*****************************************************/
;
;#include <tiny2313.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x50
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_standby=0x40
;PCODE: $00000006 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000007 VOL: 0
	#endif
;PCODE: $00000008 VOL: 0
;PCODE: $00000009 VOL: 0
;#include <delay.h>
;
;#define ROWCLK    PORTB.0
;#define ROWLATCH  PORTB.1
;#define ROWDATA   PORTB.2
;#define IN1       PINB.3
;#define IN2       PINB.4
;#define COLCLK    PORTB.5
;#define COLLATCH  PORTB.6
;#define COLDATA   PORTB.7
;
;unsigned char count = 1;

	.DSEG
;
;void col(void)  // progress column. max time per column = 2.5ms to get 50Hz
; 0000 0026 {

	.CSEG
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
; 0000 0027   if (count > 1)
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0028   {
; 0000 0029     if (count == 9) // open latch, data = 1, tick the clock, close latch, data = 0, count 2 (as if it's 1st count)
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 002A     {
; 0000 002B       COLLATCH = 0;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 002C 
; 0000 002D       COLDATA  = 1;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 002E 
; 0000 002F       COLCLK   = 1;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0030       delay_us(10);
;PCODE: $00000018 VOL: 0
; 0000 0031       COLCLK   = 0;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0032 
; 0000 0033       COLLATCH = 1;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0034 
; 0000 0035       COLDATA  = 0;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0036 
; 0000 0037       count = 2;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0038     }
; 0000 0039 
; 0000 003A     else // open latch, data = 0, tick the clock, close latch, count
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 003B     {
; 0000 003C       COLLATCH = 0;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 003D 
; 0000 003E       COLDATA  = 0;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 003F 
; 0000 0040       COLCLK   = 1;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0041       delay_us(10);
;PCODE: $00000029 VOL: 0
; 0000 0042       COLCLK   = 0;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0043 
; 0000 0044       COLLATCH = 1;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0045 
; 0000 0046       count++;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0047     }
;PCODE: $00000031 VOL: 0
; 0000 0048   }
; 0000 0049 
; 0000 004A   if (count == 1)  // open latch, data = 1, tick the clock, close latch, data = 0, count
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 004B   {
; 0000 004C     COLLATCH = 0;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 004D 
; 0000 004E     COLDATA  = 1;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 004F 
; 0000 0050     COLCLK   = 1;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0051     delay_us(10);
;PCODE: $0000003C VOL: 0
; 0000 0052     COLCLK   = 0;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0053 
; 0000 0054     COLLATCH = 1;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0055 
; 0000 0056     COLDATA  = 0;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0057 
; 0000 0058     count++;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0059   }
; 0000 005A }
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;
;void row(unsigned char data) // open latch, get n-th bit, tick clock.... , close latch
; 0000 005D {
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 005E   signed char temp, n = 7, m;
; 0000 005F   col();  //progress column
;PCODE: $0000004B VOL: 0
;	data -> Y+4
;	temp -> R17
;	n -> R16
;	m -> R19
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0060   ROWLATCH = 0;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0061 
; 0000 0062   for (m = 0; m < 8 ; m++)
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0063   {
; 0000 0064     temp = data;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0065     temp = temp << n;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0066     ROWDATA = temp >> (n + m); // process to get n-th bit of the char
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0067 
; 0000 0068     ROWCLK  = 1;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0069     delay_us(10);
;PCODE: $00000070 VOL: 0
; 0000 006A     ROWCLK  = 0;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 006B 
; 0000 006C     n--;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 006D   }
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 006E 
; 0000 006F   ROWLATCH = 1;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0070 }
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;
;void show_o(void)
; 0000 0073 {
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 0074   row(126);
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0075   row(126);
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0076   row(195);
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 0077   row(195);
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 0078   row(195);
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0079   row(195);
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 007A   row(126);
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 007B   row(126);
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 007C }
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;
;void show_f(void)
; 0000 007F {
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 0080   row(255);
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 0081   row(255);
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 0082   row(216);
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 0083   row(216);
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 0084   row(216);
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 0085   row(0);
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 0086   row(251);
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 0087   row(251);
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 0088 }
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;
;void show_uright(void)
; 0000 008B {
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 008C   row(255);
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 008D   row(255);
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 008E   row(216);
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 008F   row(216);
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 0090   row(216);
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 0091   row(0);
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 0092   row(251);
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 0093   row(251);
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 0094 }
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;
;void show_uleft(void)
; 0000 0097 {
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 0098   row(255);
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 0099   row(255);
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 009A   row(216);
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 009B   row(216);
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 009C   row(216);
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 009D   row(0);
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 009E   row(251);
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 009F   row(251);
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 00A0 }
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;void show_fuck(void)
; 0000 00A2 {
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 00A3   row(15);
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 00A4   row(15);
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 00A5   row(31);
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 00A6   row(255);
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 00A7   row(255);
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 00A8   row(31);
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 00A9   row(15);
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 00AA   row(15);
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 00AB }
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;
;void main(void)
; 0000 00AE {
;PCODE: $0000010C VOL: 0
; 0000 00AF 
; 0000 00B0 
; 0000 00B1 // Declare your local variables here
; 0000 00B2 
; 0000 00B3 // Crystal Oscillator division factor: 1
; 0000 00B4 #pragma optsize-
; 0000 00B5 CLKPR=0x80;
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 00B6 CLKPR=0x00;
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 00B7 #ifdef _OPTIMIZE_SIZE_
; 0000 00B8 #pragma optsize+
; 0000 00B9 #endif
; 0000 00BA 
; 0000 00BB // Input/Output Ports initialization
; 0000 00BC // Port A initialization
; 0000 00BD // Func2=In Func1=In Func0=In
; 0000 00BE // State2=T State1=T State0=T
; 0000 00BF PORTA=0x00;
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 00C0 DDRA=0x00;
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 00C1 
; 0000 00C2 // Port B initialization
; 0000 00C3 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 00C4 // State7=1 State6=1 State5=1 State4=1 State3=1 State2=1 State1=1 State0=1
; 0000 00C5 PORTB=0b00011000;
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 00C6 DDRB=0b11100111;
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 00C7 
; 0000 00C8 // Port D initialization
; 0000 00C9 // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00CA // State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00CB PORTD=0x00;
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 00CC DDRD=0x00;
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 00CD 
; 0000 00CE // Timer/Counter 0 initialization
; 0000 00CF // Clock source: System Clock
; 0000 00D0 // Clock value: Timer 0 Stopped
; 0000 00D1 // Mode: Normal top=0xFF
; 0000 00D2 // OC0A output: Disconnected
; 0000 00D3 // OC0B output: Disconnected
; 0000 00D4 TCCR0A=0x00;
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 00D5 TCCR0B=0x00;
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 00D6 TCNT0=0x00;
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 00D7 OCR0A=0x00;
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 00D8 OCR0B=0x00;
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 00D9 
; 0000 00DA // Timer/Counter 1 initialization
; 0000 00DB // Clock source: System Clock
; 0000 00DC // Clock value: Timer1 Stopped
; 0000 00DD // Mode: Normal top=0xFFFF
; 0000 00DE // OC1A output: Discon.
; 0000 00DF // OC1B output: Discon.
; 0000 00E0 // Noise Canceler: Off
; 0000 00E1 // Input Capture on Falling Edge
; 0000 00E2 // Timer1 Overflow Interrupt: Off
; 0000 00E3 // Input Capture Interrupt: Off
; 0000 00E4 // Compare A Match Interrupt: Off
; 0000 00E5 // Compare B Match Interrupt: Off
; 0000 00E6 TCCR1A=0x00;
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 00E7 TCCR1B=0x00;
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 00E8 TCNT1H=0x00;
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 00E9 TCNT1L=0x00;
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 00EA ICR1H=0x00;
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 00EB ICR1L=0x00;
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 00EC OCR1AH=0x00;
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 00ED OCR1AL=0x00;
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 00EE OCR1BH=0x00;
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 00EF OCR1BL=0x00;
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 00F0 
; 0000 00F1 // External Interrupt(s) initialization
; 0000 00F2 // INT0: Off
; 0000 00F3 // INT1: Off
; 0000 00F4 // Interrupt on any change on pins PCINT0-7: Off
; 0000 00F5 GIMSK=0x00;
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 00F6 MCUCR=0x00;
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 00F7 
; 0000 00F8 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00F9 TIMSK=0x00;
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 00FA 
; 0000 00FB // Universal Serial Interface initialization
; 0000 00FC // Mode: Disabled
; 0000 00FD // Clock source: Register & Counter=no clk.
; 0000 00FE // USI Counter Overflow Interrupt: Off
; 0000 00FF USICR=0x00;
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 0100 
; 0000 0101 // USART initialization
; 0000 0102 // USART disabled
; 0000 0103 UCSRB=0x00;
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 0104 
; 0000 0105 // Analog Comparator initialization
; 0000 0106 // Analog Comparator: Off
; 0000 0107 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 0108 ACSR=0x80;
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 0109 DIDR=0x00;
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 010A 
; 0000 010B while (1)
;PCODE: $00000149 VOL: 0
; 0000 010C       {
; 0000 010D         while (IN1 == 0)
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 010E         {
; 0000 010F           show_o();
;PCODE: $0000014E VOL: 0
; 0000 0110         }
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 0111 
; 0000 0112         while (IN2 == 0)
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 0113         {
; 0000 0114           show_f();
;PCODE: $00000155 VOL: 0
; 0000 0115         }
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 0116       }
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 0117 }
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
